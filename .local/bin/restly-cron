#!/bin/bash
set -euo pipefail
set -x

cmd=$2

bash -n $(command -v "$0")

if [ -e /sys/class/power_supply/AC/online ]
then
    # Don't run on battery power.
    test "$(cat /sys/class/power_supply/AC/online)" -eq 1
fi

if nmcli -t -f GENERAL.DEVICE,GENERAL.METERED dev show "$(ip route list 0/0 | sed -r 's/.*dev (\S*).*/\1/g')" | grep yes
then
    echo "Refusing to run while on metered connection, unset flag in Gnome Settings > Wi-Fi > Connected Network > Details to continue." 1>&2
    exit 1
fi

nice=""

# To test whether this has the desired effect, use
# https://github.com/brendangregg/bpf-perf-tools-book/blob/master/originals/Ch06_CPUs/cpufreq.bt
cgroup="/sys/fs/cgroup/user.slice/user-$(id --user).slice/user@$(id --user).service/app.slice/restly-${cmd}.service"
if [ -f "$cgroup/cpu.uclamp.max" ] && [ $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor) == "schedutil" ]
then
    # Uclamp is a hinting mechanism that allows the scheduler to understand the
    # performance requirements and restrictions of the tasks, thus it helps the
    # scheduler to make a better decision. And when schedutil cpufreq governor is
    # used, util clamp will influence the CPU frequency selection as well.
    #
    # Only request a part of a big core's CPU cycles. This allows the kernel to
    # move us to a little core, or to run the big core at a low cpufreq.
    #
    # Tested on AMD Ryzen 7 3800X 8-Core Processor with Fedora 39. cpufreq.bt
    # confirmed that restly ran at 2.2GHz with uclamp.max=25 and 3.8GHz with
    # uclamp.max=100.
    #
    # TODO: Use CPU base MHz / CPU max MHz here to cause the CPU to run at base
    # freq?
    echo -n "25" > "$cgroup/cpu.uclamp.max"
else
    # This has been tested and optimized for a Lenovo ThinkPad X1 Carbon Gen 9
    # (20XXS0Y800) with an 8-thread 11th Gen Intel(R) Core(TM) i7-1185G7 @
    # 3.00GHz with Ubuntu 22.04 / Fedora 39.

    # Oh dirty hack, we pin ourself to a CPU, and then lower that CPU's freq.
    # Like this we create ourself our own little core and can do the backup in
    # the background without causing fan noise.
    little_cpu=$(($RANDOM % $(nproc)))
    cpu=/sys/devices/system/cpu/cpu$little_cpu
    little_core_cpus=$little_cpu
    export GOMAXPROCS=1

    # When on SMP, also use the silbling because it will be affected by the low
    # freq anyway and therefore will not be able to do much for the rest of the
    # system.
    if [ -f $cpu/topology/core_cpus_list ]
    then
        little_core_cpus=$(cat $cpu/topology/core_cpus_list)
        export GOMAXPROCS=2
    fi

    set +e
    # On my ThinkPad X1 Carbon Gen 9, the base freq still causes 65DegC @ 120PWM
    # fan noise without https://github.com/luisgerhorst/fancontrol-tpx1c9 -
    # still run at that freq. because it's likely the most energy efficient.
    old_freq_khz=$(cat $cpu/cpufreq/scaling_max_freq)
    our_freq_khz=$(cat $cpu/cpufreq/base_frequency)
    reset_freq() {
        cur_freq_khz=$(cat $cpu/cpufreq/scaling_max_freq)
        # Only reset it, if it has not changed.
        if [ "$our_freq_khz" == "$cur_freq_khz" ]
        then
            sudo --non-interactive cpupower -c $little_core_cpus frequency-set --max ${old_freq_khz}kHz
        fi
    }
    trap reset_freq EXIT
    sudo --non-interactive cpupower -c $little_core_cpus frequency-set --max ${our_freq_khz}kHz
    set -e

    nice="$nice taskset --cpu-list $little_core_cpus"
fi

if [ "$cmd" = backup ]
then
    $nice restly $@
else
    gnome-session-inhibit --inhibit suspend \
        $nice \
        restly $@
fi
